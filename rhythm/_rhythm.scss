// Supply in Pixels
// This will set your font size, adjusted line heights and margins (top and bottom) on your element
// Best not to use percent as a unit as it has way too many quirks related to margin and padding
@mixin rhythm ($desired-size: $font_px, $unit: em, $lazy-margin-top: $rhythm-margin-top, $lazy-margin-bottom: $rhythm-margin-bottom) {
	@include em_to_rem($desired-size, $unit);
	@include margin_rhythm($desired-size, $unit, $lazy-margin-top, $lazy-margin-bottom);
}


// If you want to increase your line height use this
@mixin height_multiplier($desired-size: $font_px, $unit: em, $multiplier: 1) {
	line-height: adjusting_spacing($desired-size) * $multiplier;
}


// If not adding borders no need to compensate for them
// pass in the font size you want to define if using EMs
@mixin padding_rhythm($desired-size: $font_px, $unit: px, $lazy-padding-top: $rhythm-padding-top, $lazy-padding-bottom: $rhythm-padding-bottom) {

	@if ($unit == "rem") {
		@if ($lazy-padding-top >= 0) {
			padding-top: $line-height_px *$lazy-padding-top + 0px;  // Pixel fallback		
			padding-top: $line-height_em *$lazy-padding-top + $unit;
		}
		@if ($lazy-padding-bottom >= 0) {
			padding-bottom: $line-height_px *$lazy-padding-bottom + 0px;  // Pixel fallback		
			padding-bottom: $line-height_em *$lazy-padding-bottom + $unit;		
		}
	}
	@elseif ($unit == "em") {
		@if ($lazy-padding-top >= 0) {
			padding-top: adjusting_spacing($desired-size) * $lazy-padding-top +$unit;
		}
		@if ($lazy-padding-bottom >= 0) {		
			padding-bottom: adjusting_spacing($desired-size) * $lazy-padding-bottom + $unit;
		}
	}
	@elseif ($unit == "px") {
		@if ($lazy-padding-top >= 0) {
			padding-top: $line-height_px *$lazy-padding-top + 0px;  // Pixel fallback
		}
		@if ($lazy-padding-bottom >= 0) {
			padding-bottom: $line-height_px *$lazy-padding-bottom + 0px;  // Pixel fallback		
		}
	}
}


// Border compensation
// Also includes a horizontal rhythm for left and right padding on border elements
@mixin border_rhythm(
	$desired-size: $font_px, $unit: px, 
	$lazy-padding-top: $rhythm-padding-top, $lazy-padding-bottom: $rhythm-padding-bottom, 
	$border: false, $border_horizontal: false, $border_bottom: false, $border_left: false) 
{
	
	// Lets get the borders so we can apply the correct padding
	$border-top-value: 0; // Set default to zero
	$border-bottom-value: $border-top-value; // Set this default to top
	
	@if ($border != false) {
		$border-top-value: border_size($border);
	}
	
	@else {
		$border-top-value: 0; // If this is false lets set it equal to zero
	}
	
	@if ($border-bottom != false) {
		$border-bottom-value: border_size($border_bottom);
	}
	
	@else {
		$border-bottom-value: $border-top-value; // This could possibly be zero if only horizontals are set
	}
	
	
	// Change variables about based on unit 
	$line-height: $line-height_px;

	
	// Padding Math
	$padding-top: $line-height / 2 - $border-top-value; // default pixel value
	$padding-bottom: $line-height / 2 - $border-bottom-value; // default pixel value

	
	@if ($lazy-padding-top == 0 and $lazy-padding-bottom == 0) { // If both padding areas are empty we will split the difference and force padding
		
		@if ($unit == "rem") {
			padding-top: $padding-top +0px; // pixel fallback
			padding-top: $padding-top/$font_px +$unit;
			padding-bottom: $padding-bottom +0px; // pixel fallback
			padding-bottom: $padding-bottom/$font_px +$unit;
		}
		
		@elseif ($unit == "em") {
			padding-top: $padding-top/$desired-size +$unit;
			padding-bottom: $padding-bottom/$desired-size +$unit;		
		}
		
		@elseif ($unit == "px") {
			padding-top: $padding-top +0px; // pixel fallback
			padding-bottom: $padding-bottom +0px; // pixel fallback		
		}	
	}
	
	@elseif ($lazy-padding-top > 0 and $lazy-padding-bottom == 0) { // if padding top has value and padding bottom does not 
	
		$padding-top: $line-height - $border-top-value - $border-bottom-value; // Reset variable to our total line height minus both borders
		
		@if ($unit == "rem") {
			padding-top: $padding-top * $lazy-padding-top +0px; // pixel fallback
			padding-top: $padding-top/$font_px * $lazy-padding-top +$unit;

		}
		
		@elseif ($unit == "em") {
			padding-top: $padding-top/$desired-size * $lazy-padding-top +$unit;
		}
		
		@elseif ($unit == "px") {
			padding-top: $padding-top * $lazy-padding-top +0px; // pixel fallback
		}
		
		padding-bottom: 0; // padding bottom would be zero regardless of unit	
	}

	@elseif ($lazy-padding-top == 0 and $lazy-padding-bottom > 0) { // if padding bottom has value but padding top does not
	
		$padding-bottom: $line-height - $border-top-value - $border-bottom-value; // Reset variable to our total line height minus both borders

		padding-top: 0; // padding top is zero regardless of unit
		
		@if ($unit == "rem") {
			padding-bottom: $padding-bottom * $lazy-padding-bottom +0px; // pixel fallback
			padding-bottom: $padding-bottom/$font_px * $lazy-padding-bottom +$unit;

		}
		
		@elseif ($unit == "em") {
			padding-bottom: $padding-bottom/$desired-size * $lazy-padding-bottom +$unit;
		}
		
		@elseif ($unit == "px") {
			padding-bottom: $padding-bottom * $lazy-padding-bottom +0px; // pixel fallback
		}	
	}

	@else { // both must have value here
	
		@if ($unit == "rem") {
			padding-top: $padding-top * $lazy-padding-top +0px; // pixel fallback
			padding-top: $padding-top/$font_px * $lazy-padding-top +$unit;
			padding-bottom: $padding-bottom * $lazy-padding-bottom +0px; // pixel fallback
			padding-bottom: $padding-bottom/$font_px * $lazy-padding-bottom +$unit;
		}
		
		@elseif ($unit == "em") {
			padding-top: $padding-top/$desired-size * $lazy-padding-top +$unit;
			padding-bottom: $padding-bottom/$desired-size * $lazy-padding-bottom +$unit;		
		}
		
		@elseif ($unit == "px") {
			padding-top: $padding-top * $lazy-padding-top +0px; // pixel fallback
			padding-bottom: $padding-bottom * $lazy-padding-bottom +0px; // pixel fallback	
		}	
	}
	

	// Include Border in CSS
	@include border($border, $border_horizontal, $border_bottom, $border_left);
}